require(sf)
require(stars)
require(patchwork)
require(spocc)
require(rvest)
require(rnaturalearth)
if(!require("esri2sf")) devtools::install_github("yonghah/esri2sf")
require(raster)
require(fasterize)
require(viridis)
require(weathercan)
require(tidyverse)
#Generate Canada base layer
proj <- "+proj=lcc +lon_0=-63.1 +lat_1=43.8 +lat_2=46.9 +lat_0=45.3 +datum=WGS84 +units=m +no_defs"
ll <- "+proj=longlat +datum=WGS84"
sf::sf_use_s2(FALSE) # because of "Evaluation error: Found 1 feature with invalid spherical geometry." otherwise
if(!file.exists("tempdata/atlprov.rds")){
dir.create("tempdata")
Canada <-  rnaturalearth::ne_states(country="Canada",returnclass = "sf")
saveRDS(Canada,"tempdata/Canada.rds")
}
Canada <- readRDS("tempdata/Canada.rds")%>%
st_set_crs(4269)%>%
st_transform(proj)
names(Canada)
View(Canada)
Canada <- readRDS("tempdata/Canada.rds")%>%
select(geometry, name)%>%
st_set_crs(4269)%>%
st_transform(proj)
names(Canada)
if(!file.exists("tempdata/ecoregions.rds")){
download.file("https://www.feow.org/files/downloads/GIS_hs_snapped.zip",
destfile = "~/tempdata/GIS_hs_snapped.zip")
unzip("tempdata/GIS_hs_snapped.zip",exdir="tempdata")
ecoregions <- read_sf("tempdata/GIS_hs_snapped/feow_hydrosheds.shp")
saveRDS(ecoregions,"tempdata/ecoregions.rds")
}
#Read in and set corrdinate reference system
ecoregions <- readRDS("tempdata/ecoregions.rds")%>%
st_set_crs(4269)%>%
st_transform(proj)
#filter ecoregions to only those within Canada
Can_ecoregion<-st_intersection(Canada, ecoregions)
names(Can_ecoregion)
worldtemp<-getData("worldclim", var="bio", res=10, path="tempdata/")
worldtemp<-worldtemp[[c(1,5,6,10,11)]]
names(worldtemp)<-c("annual_mean_temp", "warmest_month", "coldest_month","avg_warmest_quarter", "avg_coldest_quarter")
#extract WorldClim data for Canadian Freshwater Ecoregions
Can_temp<-raster::extract(worldtemp, Can_ecoregion)
#extract(worldtemp, Can_ecoregion, fun='mean', na.rm=TRUE, df=TRUE, weights=TRUE)
ex <- raster::extract(worldtemp, Can_ecoregion, method='simple', na.rm=TRUE, df=TRUE, fun='mean', weights=TRUE)
#Bind Worldclim data with Caandian Freshwater Ecoregion ID numbers and save in tempdata
write.csv(cbind(Can_ecoregion$FEOW_ID, ex), "tempdata/Worldclim.csv", row.names=F)
#read back in the saved worldclim data and add to the Can-ecoregion database
ready.to.add<-read.csv("tempdata/Worldclim.csv")%>%
rename(FEOW_ID=Can_ecoregion.FEOW_ID)%>%
mutate(avg_warmest_quarter=as.numeric((avg_warmest_quarter/10)*0.86 + 2.9),
avg_coldest_quarter=as.numeric((avg_coldest_quarter/10)*0.86 + 2.9),
annual_mean_temp=as.numeric((annual_mean_temp/10)*0.86 + 2.9)
)
Can_ecoregion<- Can_ecoregion%>%
left_join(ready.to.add, by="FEOW_ID")
#Finding suitable hab for goldfish
repo_goldfish<-left_join(Can_ecoregion, ready.to.add, by="FEOW_ID")%>%
filter(avg_warmest_quarter>=17)
repo_goldfish$area<-st_area(repo_goldfish)
repo_goldfish<- repo_goldfish%>%
group_by(FEOW_ID)%>%
summarize(st_union(geometry), area_total=sum(area))
porportion_repo_goldfish<-st_join(Can_ecoregion, repo_goldfish, by="FEOW_ID")%>%
mutate(porportion_goldfish=AREA_SKM/area_total)%>%
st_make_valid()
goldfish<-st_intersection(Can_ecoregion, porportion_repo_goldfish %>% st_transform(proj))%>%
as.data.frame() %>%
group_by(FEOW_ID) %>%
summarize(Goldfishproportion=sum(porportion_goldfish))%>%
mutate_at("Goldfishproportion", str_replace, "[1/m^2]", "")
#adding proportion of ecoregions with suitable Hab for goldfish to our grid
Can_ecoregion <- Can_ecoregion %>%
left_join(goldfish ,by = "FEOW_ID")
ready.to.add<-read.csv("tempdata/Worldclim.csv")%>%
rename(FEOW_ID=Can_ecoregion.FEOW_ID)%>%
mutate(avg_warmest_quarter=as.numeric((avg_warmest_quarter/10)*0.86 + 2.9),
avg_coldest_quarter=as.numeric((avg_coldest_quarter/10)*0.86 + 2.9),
annual_mean_temp=as.numeric((annual_mean_temp/10)*0.86 + 2.9)
)
Can_ecoregion<- Can_ecoregion%>%
left_join(ready.to.add, by="FEOW_ID")
repo_goldfish<-left_join(Can_ecoregion, ready.to.add, by="FEOW_ID")%>%
filter(avg_warmest_quarter>=17)
repo_goldfish$area<-st_area(repo_goldfish)
repo_goldfish<- repo_goldfish%>%
group_by(FEOW_ID)%>%
summarize(st_union(geometry), area_total=sum(area))
porportion_repo_goldfish<-st_join(Can_ecoregion, repo_goldfish, by="FEOW_ID")%>%
mutate(porportion_goldfish=AREA_SKM/area_total)%>%
st_make_valid()
goldfish<-st_intersection(Can_ecoregion, porportion_repo_goldfish %>% st_transform(proj))%>%
as.data.frame() %>%
group_by(FEOW_ID) %>%
summarize(Goldfishproportion=sum(porportion_goldfish))%>%
mutate_at("Goldfishproportion", str_replace, "[1/m^2]", "")
Can_ecoregion <- Can_ecoregion %>%
left_join(goldfish ,by = "FEOW_ID")
#Checking it worked by mapping the results
# ggplot(data=Canada)+
#   geom_sf(fill="white")+
#   geom_sf(data=Can_ecoregion, aes(fill=Goldfishproportion))+
#   scale_fill_viridis(alpha = .4, na.value = "antiquewhite1", discrete = TRUE) +
#   ggtitle("Suitable Climate for Goldfish Reproduction based on \n Converted Air Temperature of Warmest Quarter (WorldClim Data)")+
#   labs(fill="Proportion of ecoregion with suitable climate for species reproduction")+
#   theme_light()
#Finding suitable hab for carp
repo_carp<-left_join(Can_ecoregion, ready.to.add, by="FEOW_ID")%>%
filter(avg_warmest_quarter>=13)
repo_carp$area<-st_area(repo_carp)
repo_carp<- repo_carp%>%
group_by(FEOW_ID)%>%
summarize(st_union(geometry), area_total=sum(area))
porportion_repo_carp<-st_join(Can_ecoregion, repo_carp, by="FEOW_ID")%>%
mutate(porportion_carp=AREA_SKM/area_total)%>%
st_make_valid()
carp<-st_intersection(Can_ecoregion, porportion_repo_carp %>% st_transform(proj))%>%
as.data.frame() %>%
group_by(FEOW_ID) %>%
summarize(Carpproportion=sum(porportion_carp))%>%
mutate_at("Carpproportion", str_replace, "[1/m^2]", "")
Can_ecoregion <- Can_ecoregion %>%
left_join(carp ,by = "FEOW_ID")%>%
mutate(Carpproportion=as.numeric(Carpproportion))
repo_bc<-left_join(Can_ecoregion, ready.to.add, by="FEOW_ID")%>%
filter(avg_warmest_quarter>=16)
repo_bc$area<-st_area(repo_bc)
repo_bc<- repo_bc%>%
group_by(FEOW_ID)%>%
summarize(st_union(geometry), area_total=sum(area))
porportion_repo_bc<-st_join(Can_ecoregion, repo_bc, by="FEOW_ID")%>%
mutate(porportion_bc=AREA_SKM/area_total)%>%
st_make_valid()
blackcrappie<-st_intersection(Can_ecoregion, porportion_repo_bc %>% st_transform(proj))%>%
as.data.frame() %>%
group_by(FEOW_ID) %>%
summarize(BlackCrappieproportion=sum(porportion_bc))%>%
mutate_at("BlackCrappieproportion", str_replace, "[1/m^2]", "")
Can_ecoregion <- Can_ecoregion %>%
left_join(blackcrappie ,by = "FEOW_ID")%>%
mutate(BlackCrappieproportion=as.numeric(BlackCrappieproportion))
setwd("C:/Users/kingsburys/Documents/GitHub/Freshwater_Horizon_Scan_NS")
library (readxl)
library (tidyverse)
CABI<-read_excel("data/CABI_Horizon Scanning_pulled 27 Apr 2023.xlsx")
names(CABI)
unique(CABI$Class)
CABI_classFilter<-CABI%>%
dplyr::filter(Class!=c("Arachnida", "NA", "Insecta", "Amphibia", "Aves", "Hirudinoidea",
"Secernentea", "Ulvophyceae", "Reptilia", "Phaeophyceae", "Hydrozoa",
"Cestoda", "Ascidiacea" , "Trematoda", "Copepoda", "Adenophorea",
"Myxosporea Myxobolus cerebralis", "Diplopoda", "Ophiuroidea",
"Pinopsida", "Cephalopoda", "Chlorophyceae"))
Undesired_classs<-c("Arachnida", "NA", "Insecta", "Amphibia", "Aves", "Hirudinoidea",
"Secernentea", "Ulvophyceae", "Reptilia", "Phaeophyceae", "Hydrozoa",
"Cestoda", "Ascidiacea" , "Trematoda", "Copepoda", "Adenophorea",
"Myxosporea Myxobolus cerebralis", "Diplopoda", "Ophiuroidea",
"Pinopsida", "Cephalopoda", "Chlorophyceae")
CABI_classFilter<-CABI%>%
dplyr::filter(Class!= Undesired_classs)
CABI_classFilter<-CABI%>%
dplyr::filter(Class %in% Undesired_classs)
unqiue(CABI_classFilter$Class)
unique(CABI_classFilter$Class)
CABI_classFilter<-CABI%>%
dplyr::filter(Class !(%in% Undesired_classs))
CABI_classFilter<-CABI%>%
dplyr::filter(!(Class %in% Undesired_classs))
unique(CABI_classFilter$Number_of_presence_records_in_neighbouring_geographic_areas)
nrow(CABI_classFilter$Number_of_presence_records_in_neighbouring_geographic_areas==1)
names(CABI_classFilter)
unique(CABI_classFilter$Invasive_Somewhere)
CABI_filtered_invasive<-CABI_classFilter%>%
dplyr::filter(Invasive_Somewhere=="invasive")
install.packages("taxize")
library (readxl)
library(taxize)
library (tidyverse)
#Use taxize to check the spelling of species names
tax_fix_CABI<-gnr_resolve(CABI_filtered_invasive$Preferred_scientific_name)
Species_names<-CABI_filtered_invasive%>%
dplyr::select(Preferred_scientific_name)
#Use taxize to check the spelling of species names
tax_fix_CABI<-gnr_resolve(Species_names)
View(tax_fix_CABI)
View(Species_names)
Species_names<-CABI_filtered_invasive%>%
dplyr::select(Preferred_scientific_name)%>%
dplyr::filter(!is.na(Preferred_scientific_name))
View(Species_names)
#Use taxize to check the spelling of species names
tax_fix_CABI<-gnr_resolve(Species_names)
install.library(c("dplyr", "magrittr"))
install.packages("magrittr")
install.packages("magrittr")
?magrittr
??magrittr
#Use taxize to check the spelling of species names
src <- c("EOL", "The International Plant Names Index",
"Index Fungorum", "ITIS", "Catalogue of Life",
"Tropicos - Missouri Botanical Garden")
subset(gnr_datasources(), title %in% src)
library (readxl)
library(taxize)
library(magrittr)
library (tidyverse)
gnr_datasources()
#Use taxize to check the spelling of species names
src <- c("EOL", "The International Plant Names Index",
"Index Fungorum", "ITIS", "Catalogue of Life",
"Tropicos - Missouri Botanical Garden")
subset(gnr_datasources(), title %in% src)
#Use taxize to check the spelling of species names
gnr_datasources()
#Use taxize to check the spelling of species names
gnr_datasources(title)
#Use taxize to check the spelling of species names
src_pos<-gnr_datasources()
View(src_pos)
unique(src_pos$title)
src <- c( "ITIS", "Invasive Species of Belgium", "Global Invasive Species Database",
"OBIS", "Belgian Species List", "IUCN Red List of Threatened Species", "Database of Vascular Plants of Canada (VASCAN)",
"Integrated Taxonomic Information SystemITIS")
subset(gnr_datasources(), title %in% src)
tax_fix_CABI<-CABI_filtered_invasive$Preferred_scientific_name %>%
gnr_resolve(data_source_ids = c(3, 104, 125, 147, 149, 157, 163),
with_canonical_ranks=T)
View(tax_fix_CABI)
View(tax_fix_CABI)
tax_fix.short <- tax_fix_CABI %>%
select(submitted_name, matched_name2, score)%>%
distinct()
result.short
tax_fix.short
?write.csv
write.csv(tax_fix.short, "data/tax_fix.short.csv")
install.packages("taxadb")
library (readxl)
library(taxize)
library(magrittr)
library(taxadb)
library (tidyverse)
allnames<-read.csv(file="data/tax_fix.short.csv", header=TRUE)
names(allnames)
#get  IDS for each scientific name
syn1<-allnames %>%
select(matched_name2) %>%
distinct()%>%
mutate(ID=get_ids(matched_name2,"itis"))
View(syn1)
syn1_NA<-as.data.frame(syn1$matched_name2[is.na(syn1$ID)])
colnames(syn1_NA)<-c("name")
NA_IDS<-NULL
for(i in unique(syn1_NA$name)){
tmp<-as.data.frame(filter_name(i, 'itis')[5])
tmp$name<-paste0(i)
NA_IDS<-rbind(NA_IDS,tmp)
}
View(syn1_NA)
syn1_NA<-as.data.frame(syn1$matched_name2[is.na(syn1$ID)])
is.na(syn1$ID)
syn1_NA<-syn1%>%
filter(!is.na(ID))
View(syn1_NA)
syn1_NA<-syn1%>%
filter(!is.na(ID))%>%
as.data.frame()
# NA_IDS<-NULL
# for(i in unique(syn1_NA$name)){
#   tmp<-as.data.frame(filter_name(i, 'itis')[5])
#   tmp$name<-paste0(i)
#   NA_IDS<-rbind(NA_IDS,tmp)
# }
#
# #join with originial names
# colnames(syn1)<-c("name","ID")
# IDS<-left_join(syn1,NA_IDS,by="name") #I think its a left join double check this
IDS<-syn1_NA
#extract just the unique IDs
IDS<-data.frame(ID=c(IDS[,"ID"],IDS[,"acceptedNameUsageID"]))
View(IDS)
# NA_IDS<-NULL
# for(i in unique(syn1_NA$name)){
#   tmp<-as.data.frame(filter_name(i, 'itis')[5])
#   tmp$name<-paste0(i)
#   NA_IDS<-rbind(NA_IDS,tmp)
# }
#
# #join with originial names
# colnames(syn1)<-c("name","ID")
# IDS<-left_join(syn1,NA_IDS,by="name") #I think its a left join double check this
IDS<-syn1_NA%>%
distinct(ID)
View(IDS)
#Use Taxize to search for synonyms
synlist1 <- synonyms(c(syn1_NA$matched_name2), db="itis", rows=1)
View(synlist1)
names(synlist1)
?synonyms
#Use Taxize to search for synonyms
synlist1 <- synonyms(c(syn1_NA$matched_name2), db="itis")
#Use Taxize to search for synonyms
synlist1 <- synonyms(c(syn1_NA$matched_name2), db="itis", accepted=T)
View(synlist1)
synlist1<-synlist1%>%
as.data.frame()
synlist1<-synlist1%>%
as.matrix()
View(tax_fix_CABI)
tax_fix_CABI<-CABI_filtered_invasive$Preferred_scientific_name %>%
gnr_resolve(data_source_ids = c(3, 104, 125, 147, 149, 157, 163),
with_canonical_ranks=T)%>%
mutate(name_correct = ifelse(user_clean %in% matched_name, T, F)) %>% #determine if the original name was in the list of names retrieved
mutate(species_clean = ifelse(name_correct ==T, user_clean, matched_name[(amatch(user_clean, matched_name, maxDist = Inf))]))
names(tax_fix.short)
names(tax_fix_CABI)
unique(tax_fix_CABI$data_source_title)
tax_fix.short <- tax_fix_CABI %>%
select(submitted_name, matched_name2, score, data_source_title)%>%
distinct()
tax_fix.itis<-tax_fix.short%>%
filter(data_source_title=="Integrated Taxonomic Information SystemITIS")%>%
filter(score >=0.8)
View(tax_fix.itis)
is.na(tax_fix.itis)
max.print
getOption("max.print")
View(tax_fix_CABI)
tax_fix.itis<- tax_fix.itis[match(unique(tax_fix.itis$matched_name2), tax_fix.itis$matched_name2),]
??amatch
#read in list of completed species assessments
completed<-read_xlsx("data/Species_screening_list.xlsx", sheet=1)
View(completed)
View(tax_fix.itis)
tax_fix.itis<- tax_fix.itis[match(unique(tax_fix.itis$matched_name2), tax_fix.itis$matched_name2),]%>%
rename(ScientificName=matched_name2)
#read in list of completed species assessments
completed<-read_xlsx("data/Species_screening_list.xlsx", sheet=1)%>%
rename(ScientificName=species_latin)
Uncompleted_sp<-anti_join(tax_fix.itis, completed, by="ScientificName")
View(Uncompleted_sp)
citation()
version()
sessionInfo()
